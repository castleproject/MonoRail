//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ODataTestWebSite.Controllers.AggRootModel {
    using System;
    using System.Web;
    using Castle.MonoRail;
    using Castle.MonoRail.Routing;
    using System.Runtime.InteropServices;
    
    
    public partial class RootModelController {
        
        public abstract class Urls {
            
            public abstract class Index : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["odataroute"], new Castle.MonoRail.UrlParameters("AggRootModel", "Index"));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["odataroute"], new Castle.MonoRail.UrlParameters("AggRootModel", "Index"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["odataroute"], new Castle.MonoRail.UrlParameters("AggRootModel", "Index"));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["odataroute"], new Castle.MonoRail.UrlParameters("AggRootModel", "Index"));
                }
            }
            
            public abstract class Process : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["odataroute"], new Castle.MonoRail.UrlParameters("AggRootModel", "Process"));
                }
                
                public static TargetUrl Get(Castle.MonoRail.IServiceRegistry services, string httpMethod, string greedyMatch, Castle.MonoRail.Routing.RouteMatch routeMatch, System.Web.HttpContextBase context) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((services != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("services", services.ToString()));
                    }
                    if ((httpMethod != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("httpMethod", httpMethod.ToString()));
                    }
                    if ((greedyMatch != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("greedyMatch", greedyMatch.ToString()));
                    }
                    if ((routeMatch != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("routeMatch", routeMatch.ToString()));
                    }
                    if ((context != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("context", context.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["odataroute"], new Castle.MonoRail.UrlParameters("AggRootModel", "Process", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["odataroute"], new Castle.MonoRail.UrlParameters("AggRootModel", "Process"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["odataroute"], new Castle.MonoRail.UrlParameters("AggRootModel", "Process"));
                }
                
                public static TargetUrl Delete(Castle.MonoRail.IServiceRegistry services, string httpMethod, string greedyMatch, Castle.MonoRail.Routing.RouteMatch routeMatch, System.Web.HttpContextBase context) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((services != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("services", services.ToString()));
                    }
                    if ((httpMethod != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("httpMethod", httpMethod.ToString()));
                    }
                    if ((greedyMatch != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("greedyMatch", greedyMatch.ToString()));
                    }
                    if ((routeMatch != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("routeMatch", routeMatch.ToString()));
                    }
                    if ((context != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("context", context.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["odataroute"], new Castle.MonoRail.UrlParameters("AggRootModel", "Process", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["odataroute"], new Castle.MonoRail.UrlParameters("AggRootModel", "Process"));
                }
            }
        }
    }
    
    public partial class BranchRepositoryController {
        
        public abstract class Urls {
            
            public abstract class Authorize : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "Authorize"));
                }
                
                public static TargetUrl Get(ODataTestWebSite.Controllers.AggRootModel.Branch ent) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ent != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ent", ent.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "Authorize", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "Authorize"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "Authorize"));
                }
                
                public static TargetUrl Delete(ODataTestWebSite.Controllers.AggRootModel.Branch ent) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ent != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ent", ent.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "Authorize", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "Authorize"));
                }
            }
            
            public abstract class Create : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "Create"));
                }
                
                public static TargetUrl Get(ODataTestWebSite.Controllers.AggRootModel.Repository repos, Castle.MonoRail.Model<ODataTestWebSite.Controllers.AggRootModel.Branch> branch) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((repos != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("repos", repos.ToString()));
                    }
                    if ((branch != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("branch", branch.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "Create", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "Create"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "Create"));
                }
                
                public static TargetUrl Delete(ODataTestWebSite.Controllers.AggRootModel.Repository repos, Castle.MonoRail.Model<ODataTestWebSite.Controllers.AggRootModel.Branch> branch) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((repos != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("repos", repos.ToString()));
                    }
                    if ((branch != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("branch", branch.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "Create", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "Create"));
                }
            }
            
            public abstract class New : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "New"));
                }
                
                public static TargetUrl Get(ODataTestWebSite.Controllers.AggRootModel.Repository parent) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((parent != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("parent", parent.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "New", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "New"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "New"));
                }
                
                public static TargetUrl Delete(ODataTestWebSite.Controllers.AggRootModel.Repository parent) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((parent != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("parent", parent.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "New", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "New"));
                }
            }
            
            public abstract class Remove : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "Remove"));
                }
                
                public static TargetUrl Get(ODataTestWebSite.Controllers.AggRootModel.Branch ent) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ent != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ent", ent.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "Remove", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "Remove"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "Remove"));
                }
                
                public static TargetUrl Delete(ODataTestWebSite.Controllers.AggRootModel.Branch ent) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ent != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ent", ent.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "Remove", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "Remove"));
                }
            }
            
            public abstract class View : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "View"));
                }
                
                public static TargetUrl Get(ODataTestWebSite.Controllers.AggRootModel.Branch ent) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ent != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ent", ent.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "View", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "View"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "View"));
                }
                
                public static TargetUrl Delete(ODataTestWebSite.Controllers.AggRootModel.Branch ent) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ent != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ent", ent.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "View", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "View"));
                }
            }
            
            public abstract class ViewAll : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "ViewAll"));
                }
                
                public static TargetUrl Get(System.Collections.Generic.IEnumerable<ODataTestWebSite.Controllers.AggRootModel.Branch> ents) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ents != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ents", ents.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "ViewAll", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "ViewAll"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "ViewAll"));
                }
                
                public static TargetUrl Delete(System.Collections.Generic.IEnumerable<ODataTestWebSite.Controllers.AggRootModel.Branch> ents) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ents != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ents", ents.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "ViewAll", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "ViewAll"));
                }
            }
            
            public abstract class _Put_Update : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "_Put_Update"));
                }
                
                public static TargetUrl Get(ODataTestWebSite.Controllers.AggRootModel.Branch ent) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ent != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ent", ent.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "_Put_Update", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "_Put_Update"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "_Put_Update"));
                }
                
                public static TargetUrl Delete(ODataTestWebSite.Controllers.AggRootModel.Branch ent) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ent != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ent", ent.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "_Put_Update", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("BranchRepository", "_Put_Update"));
                }
            }
        }
    }
    
    public partial class CodeRepositoryController {
        
        public abstract class Urls {
            
            public abstract class Authorize : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Authorize"));
                }
                
                public static TargetUrl Get(ODataTestWebSite.Controllers.AggRootModel.Repository repos, System.Security.Principal.IPrincipal user, System.Web.HttpRequestBase requestBase) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((repos != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("repos", repos.ToString()));
                    }
                    if ((user != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("user", user.ToString()));
                    }
                    if ((requestBase != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("requestBase", requestBase.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Authorize", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Authorize"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Authorize"));
                }
                
                public static TargetUrl Delete(ODataTestWebSite.Controllers.AggRootModel.Repository repos, System.Security.Principal.IPrincipal user, System.Web.HttpRequestBase requestBase) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((repos != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("repos", repos.ToString()));
                    }
                    if ((user != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("user", user.ToString()));
                    }
                    if ((requestBase != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("requestBase", requestBase.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Authorize", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Authorize"));
                }
            }
            
            public abstract class AuthorizeMany : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "AuthorizeMany"));
                }
                
                public static TargetUrl Get(System.Collections.Generic.IEnumerable<ODataTestWebSite.Controllers.AggRootModel.Repository> repos, System.Security.Principal.IPrincipal user, System.Web.HttpRequestBase requestBase) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((repos != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("repos", repos.ToString()));
                    }
                    if ((user != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("user", user.ToString()));
                    }
                    if ((requestBase != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("requestBase", requestBase.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "AuthorizeMany", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "AuthorizeMany"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "AuthorizeMany"));
                }
                
                public static TargetUrl Delete(System.Collections.Generic.IEnumerable<ODataTestWebSite.Controllers.AggRootModel.Repository> repos, System.Security.Principal.IPrincipal user, System.Web.HttpRequestBase requestBase) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((repos != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("repos", repos.ToString()));
                    }
                    if ((user != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("user", user.ToString()));
                    }
                    if ((requestBase != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("requestBase", requestBase.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "AuthorizeMany", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "AuthorizeMany"));
                }
            }
            
            public abstract class Create : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Create"));
                }
                
                public static TargetUrl Get(Castle.MonoRail.Model<ODataTestWebSite.Controllers.AggRootModel.Repository> repos) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((repos != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("repos", repos.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Create", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Create"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Create"));
                }
                
                public static TargetUrl Delete(Castle.MonoRail.Model<ODataTestWebSite.Controllers.AggRootModel.Repository> repos) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((repos != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("repos", repos.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Create", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Create"));
                }
            }
            
            public abstract class Edit : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Edit"));
                }
                
                public static TargetUrl Get(int id) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    args.Add(new System.Collections.Generic.KeyValuePair<string, string>("id", id.ToString()));
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Edit", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Edit"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Edit"));
                }
                
                public static TargetUrl Delete(int id) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    args.Add(new System.Collections.Generic.KeyValuePair<string, string>("id", id.ToString()));
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Edit", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Edit"));
                }
            }
            
            public abstract class New : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "New"));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "New"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "New"));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "New"));
                }
            }
            
            public abstract class Remove : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Remove"));
                }
                
                public static TargetUrl Get(ODataTestWebSite.Controllers.AggRootModel.Repository repos) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((repos != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("repos", repos.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Remove", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Remove"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Remove"));
                }
                
                public static TargetUrl Delete(ODataTestWebSite.Controllers.AggRootModel.Repository repos) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((repos != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("repos", repos.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Remove", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Remove"));
                }
            }
            
            public abstract class Update : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Update"));
                }
                
                public static TargetUrl Get(Castle.MonoRail.Model<ODataTestWebSite.Controllers.AggRootModel.Repository> repos) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((repos != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("repos", repos.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Update", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Update"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Update"));
                }
                
                public static TargetUrl Delete(Castle.MonoRail.Model<ODataTestWebSite.Controllers.AggRootModel.Repository> repos) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((repos != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("repos", repos.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Update", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "Update"));
                }
            }
            
            public abstract class View : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "View"));
                }
                
                public static TargetUrl Get(ODataTestWebSite.Controllers.AggRootModel.Repository repos) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((repos != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("repos", repos.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "View", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "View"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "View"));
                }
                
                public static TargetUrl Delete(ODataTestWebSite.Controllers.AggRootModel.Repository repos) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((repos != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("repos", repos.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "View", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "View"));
                }
            }
            
            public abstract class ViewAll : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "ViewAll"));
                }
                
                public static TargetUrl Get(System.Collections.Generic.IEnumerable<ODataTestWebSite.Controllers.AggRootModel.Repository> ents) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ents != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ents", ents.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "ViewAll", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "ViewAll"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "ViewAll"));
                }
                
                public static TargetUrl Delete(System.Collections.Generic.IEnumerable<ODataTestWebSite.Controllers.AggRootModel.Repository> ents) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ents != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ents", ents.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "ViewAll", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "ViewAll"));
                }
            }
            
            public abstract class ViewMany : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "ViewMany"));
                }
                
                public static TargetUrl Get(System.Collections.Generic.IEnumerable<ODataTestWebSite.Controllers.AggRootModel.Repository> repos) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((repos != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("repos", repos.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "ViewMany", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "ViewMany"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "ViewMany"));
                }
                
                public static TargetUrl Delete(System.Collections.Generic.IEnumerable<ODataTestWebSite.Controllers.AggRootModel.Repository> repos) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((repos != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("repos", repos.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "ViewMany", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "ViewMany"));
                }
            }
            
            public abstract class _Put_Update : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "_Put_Update"));
                }
                
                public static TargetUrl Get(ODataTestWebSite.Controllers.AggRootModel.Repository ent) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ent != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ent", ent.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "_Put_Update", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "_Put_Update"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "_Put_Update"));
                }
                
                public static TargetUrl Delete(ODataTestWebSite.Controllers.AggRootModel.Repository ent) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ent != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ent", ent.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "_Put_Update", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("CodeRepository", "_Put_Update"));
                }
            }
        }
    }
    
    public partial class RevisionRepositoryController {
        
        public abstract class Urls {
            
            public abstract class Authorize : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "Authorize"));
                }
                
                public static TargetUrl Get(ODataTestWebSite.Controllers.AggRootModel.Revision ent) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ent != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ent", ent.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "Authorize", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "Authorize"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "Authorize"));
                }
                
                public static TargetUrl Delete(ODataTestWebSite.Controllers.AggRootModel.Revision ent) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ent != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ent", ent.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "Authorize", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "Authorize"));
                }
            }
            
            public abstract class AuthorizeMany : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "AuthorizeMany"));
                }
                
                public static TargetUrl Get(System.Collections.Generic.IEnumerable<ODataTestWebSite.Controllers.AggRootModel.Revision> revisions) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((revisions != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("revisions", revisions.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "AuthorizeMany", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "AuthorizeMany"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "AuthorizeMany"));
                }
                
                public static TargetUrl Delete(System.Collections.Generic.IEnumerable<ODataTestWebSite.Controllers.AggRootModel.Revision> revisions) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((revisions != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("revisions", revisions.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "AuthorizeMany", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "AuthorizeMany"));
                }
            }
            
            public abstract class Create : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "Create"));
                }
                
                public static TargetUrl Get(ODataTestWebSite.Controllers.AggRootModel.Repository repos, ODataTestWebSite.Controllers.AggRootModel.Branch branch, Castle.MonoRail.Model<ODataTestWebSite.Controllers.AggRootModel.Revision> revision) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((repos != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("repos", repos.ToString()));
                    }
                    if ((branch != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("branch", branch.ToString()));
                    }
                    if ((revision != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("revision", revision.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "Create", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "Create"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "Create"));
                }
                
                public static TargetUrl Delete(ODataTestWebSite.Controllers.AggRootModel.Repository repos, ODataTestWebSite.Controllers.AggRootModel.Branch branch, Castle.MonoRail.Model<ODataTestWebSite.Controllers.AggRootModel.Revision> revision) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((repos != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("repos", repos.ToString()));
                    }
                    if ((branch != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("branch", branch.ToString()));
                    }
                    if ((revision != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("revision", revision.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "Create", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "Create"));
                }
            }
            
            public abstract class Remove : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "Remove"));
                }
                
                public static TargetUrl Get(ODataTestWebSite.Controllers.AggRootModel.Revision ent) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ent != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ent", ent.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "Remove", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "Remove"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "Remove"));
                }
                
                public static TargetUrl Delete(ODataTestWebSite.Controllers.AggRootModel.Revision ent) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ent != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ent", ent.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "Remove", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "Remove"));
                }
            }
            
            public abstract class View : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "View"));
                }
                
                public static TargetUrl Get(ODataTestWebSite.Controllers.AggRootModel.Revision ent) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ent != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ent", ent.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "View", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "View"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "View"));
                }
                
                public static TargetUrl Delete(ODataTestWebSite.Controllers.AggRootModel.Revision ent) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ent != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ent", ent.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "View", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "View"));
                }
            }
            
            public abstract class ViewAll : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "ViewAll"));
                }
                
                public static TargetUrl Get(System.Collections.Generic.IEnumerable<ODataTestWebSite.Controllers.AggRootModel.Revision> ents) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ents != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ents", ents.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "ViewAll", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "ViewAll"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "ViewAll"));
                }
                
                public static TargetUrl Delete(System.Collections.Generic.IEnumerable<ODataTestWebSite.Controllers.AggRootModel.Revision> ents) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ents != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ents", ents.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "ViewAll", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "ViewAll"));
                }
            }
            
            public abstract class _Put_Update : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "_Put_Update"));
                }
                
                public static TargetUrl Get(ODataTestWebSite.Controllers.AggRootModel.Revision ent) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ent != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ent", ent.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "_Put_Update", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "_Put_Update"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "_Put_Update"));
                }
                
                public static TargetUrl Delete(ODataTestWebSite.Controllers.AggRootModel.Revision ent) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ent != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ent", ent.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "_Put_Update", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("RevisionRepository", "_Put_Update"));
                }
            }
        }
    }
}
namespace ODataTestWebSite.Controllers.HierarchicalModel {
    using System;
    using System.Web;
    using Castle.MonoRail;
    using Castle.MonoRail.Routing;
    using System.Runtime.InteropServices;
    
    
    public partial class CategoriesController {
        
        public abstract class Urls {
            
            public abstract class Access : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Access"));
                }
                
                public static TargetUrl Get(Castle.MonoRail.Model<ODataTestWebSite.Controllers.HierarchicalModel.Category> category) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((category != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("category", category.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Access", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Access"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Access"));
                }
                
                public static TargetUrl Delete(Castle.MonoRail.Model<ODataTestWebSite.Controllers.HierarchicalModel.Category> category) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((category != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("category", category.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Access", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Access"));
                }
            }
            
            public abstract class AccessMany : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "AccessMany"));
                }
                
                public static TargetUrl Get(System.Collections.Generic.IEnumerable<ODataTestWebSite.Controllers.HierarchicalModel.Category> categories) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((categories != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("categories", categories.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "AccessMany", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "AccessMany"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "AccessMany"));
                }
                
                public static TargetUrl Delete(System.Collections.Generic.IEnumerable<ODataTestWebSite.Controllers.HierarchicalModel.Category> categories) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((categories != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("categories", categories.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "AccessMany", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "AccessMany"));
                }
            }
            
            public abstract class Authorize : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Authorize"));
                }
                
                public static TargetUrl Get(ODataTestWebSite.Controllers.HierarchicalModel.Category ent) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ent != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ent", ent.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Authorize", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Authorize"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Authorize"));
                }
                
                public static TargetUrl Delete(ODataTestWebSite.Controllers.HierarchicalModel.Category ent) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ent != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ent", ent.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Authorize", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Authorize"));
                }
            }
            
            public abstract class Create : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Create"));
                }
                
                public static TargetUrl Get(Castle.MonoRail.Model<ODataTestWebSite.Controllers.HierarchicalModel.Category> category) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((category != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("category", category.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Create", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Create"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Create"));
                }
                
                public static TargetUrl Delete(Castle.MonoRail.Model<ODataTestWebSite.Controllers.HierarchicalModel.Category> category) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((category != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("category", category.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Create", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Create"));
                }
            }
            
            public abstract class Remove : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Remove"));
                }
                
                public static TargetUrl Get(ODataTestWebSite.Controllers.HierarchicalModel.Category category) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((category != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("category", category.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Remove", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Remove"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Remove"));
                }
                
                public static TargetUrl Delete(ODataTestWebSite.Controllers.HierarchicalModel.Category category) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((category != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("category", category.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Remove", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Remove"));
                }
            }
            
            public abstract class Update : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Update"));
                }
                
                public static TargetUrl Get(Castle.MonoRail.Model<ODataTestWebSite.Controllers.HierarchicalModel.Category> category) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((category != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("category", category.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Update", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Update"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Update"));
                }
                
                public static TargetUrl Delete(Castle.MonoRail.Model<ODataTestWebSite.Controllers.HierarchicalModel.Category> category) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((category != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("category", category.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Update", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "Update"));
                }
            }
            
            public abstract class View : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "View"));
                }
                
                public static TargetUrl Get(ODataTestWebSite.Controllers.HierarchicalModel.Category ent) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ent != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ent", ent.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "View", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "View"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "View"));
                }
                
                public static TargetUrl Delete(ODataTestWebSite.Controllers.HierarchicalModel.Category ent) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ent != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ent", ent.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "View", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "View"));
                }
            }
            
            public abstract class ViewAll : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "ViewAll"));
                }
                
                public static TargetUrl Get(System.Collections.Generic.IEnumerable<ODataTestWebSite.Controllers.HierarchicalModel.Category> ents) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ents != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ents", ents.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "ViewAll", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "ViewAll"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "ViewAll"));
                }
                
                public static TargetUrl Delete(System.Collections.Generic.IEnumerable<ODataTestWebSite.Controllers.HierarchicalModel.Category> ents) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ents != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ents", ents.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "ViewAll", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "ViewAll"));
                }
            }
            
            public abstract class _Put_Update : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "_Put_Update"));
                }
                
                public static TargetUrl Get(ODataTestWebSite.Controllers.HierarchicalModel.Category ent) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ent != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ent", ent.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "_Put_Update", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "_Put_Update"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "_Put_Update"));
                }
                
                public static TargetUrl Delete(ODataTestWebSite.Controllers.HierarchicalModel.Category ent) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((ent != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("ent", ent.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "_Put_Update", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Categories", "_Put_Update"));
                }
            }
        }
    }
    
    public partial class HierarchicalModelController {
        
        public abstract class Urls {
            
            public abstract class Process : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("HierarchicalModel", "Process"));
                }
                
                public static TargetUrl Get(Castle.MonoRail.IServiceRegistry services, string httpMethod, string greedyMatch, Castle.MonoRail.Routing.RouteMatch routeMatch, System.Web.HttpContextBase context) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((services != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("services", services.ToString()));
                    }
                    if ((httpMethod != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("httpMethod", httpMethod.ToString()));
                    }
                    if ((greedyMatch != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("greedyMatch", greedyMatch.ToString()));
                    }
                    if ((routeMatch != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("routeMatch", routeMatch.ToString()));
                    }
                    if ((context != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("context", context.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("HierarchicalModel", "Process", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("HierarchicalModel", "Process"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("HierarchicalModel", "Process"));
                }
                
                public static TargetUrl Delete(Castle.MonoRail.IServiceRegistry services, string httpMethod, string greedyMatch, Castle.MonoRail.Routing.RouteMatch routeMatch, System.Web.HttpContextBase context) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((services != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("services", services.ToString()));
                    }
                    if ((httpMethod != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("httpMethod", httpMethod.ToString()));
                    }
                    if ((greedyMatch != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("greedyMatch", greedyMatch.ToString()));
                    }
                    if ((routeMatch != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("routeMatch", routeMatch.ToString()));
                    }
                    if ((context != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("context", context.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("HierarchicalModel", "Process", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("HierarchicalModel", "Process"));
                }
            }
        }
    }
}
namespace ODataTestWebSite.Controllers {
    using System;
    using System.Web;
    using Castle.MonoRail;
    using Castle.MonoRail.Routing;
    using System.Runtime.InteropServices;
    
    
    public partial class HomeController {
        
        public abstract class Urls {
            
            public abstract class Index : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Home", "Index"));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Home", "Index"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Home", "Index"));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Home", "Index"));
                }
            }
        }
    }
}
namespace ODataTestWebSite.Controllers.SingleEntitySet {
    using System;
    using System.Web;
    using Castle.MonoRail;
    using Castle.MonoRail.Routing;
    using System.Runtime.InteropServices;
    
    
    public partial class SingleEntitySetModelController {
        
        public abstract class Urls {
            
            public abstract class Process : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("SingleEntitySetModel", "Process"));
                }
                
                public static TargetUrl Get(Castle.MonoRail.IServiceRegistry services, string httpMethod, string greedyMatch, Castle.MonoRail.Routing.RouteMatch routeMatch, System.Web.HttpContextBase context) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((services != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("services", services.ToString()));
                    }
                    if ((httpMethod != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("httpMethod", httpMethod.ToString()));
                    }
                    if ((greedyMatch != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("greedyMatch", greedyMatch.ToString()));
                    }
                    if ((routeMatch != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("routeMatch", routeMatch.ToString()));
                    }
                    if ((context != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("context", context.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("SingleEntitySetModel", "Process", args.ToArray()));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("SingleEntitySetModel", "Process"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("SingleEntitySetModel", "Process"));
                }
                
                public static TargetUrl Delete(Castle.MonoRail.IServiceRegistry services, string httpMethod, string greedyMatch, Castle.MonoRail.Routing.RouteMatch routeMatch, System.Web.HttpContextBase context) {
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> args = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if ((services != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("services", services.ToString()));
                    }
                    if ((httpMethod != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("httpMethod", httpMethod.ToString()));
                    }
                    if ((greedyMatch != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("greedyMatch", greedyMatch.ToString()));
                    }
                    if ((routeMatch != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("routeMatch", routeMatch.ToString()));
                    }
                    if ((context != null)) {
                        args.Add(new System.Collections.Generic.KeyValuePair<string, string>("context", context.ToString()));
                    }
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("SingleEntitySetModel", "Process", args.ToArray()));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("SingleEntitySetModel", "Process"));
                }
            }
        }
    }
}
